#!/usr/bin/env node

'use strict';

var path = require('path');
var Bagpipe = require('bagpipe');
var fs = require('fs');
var querystring = require('querystring');
var request = require('npm-request');
var config = require('../config');
var argv = require('../parse_argv')('sync');

var args = argv.args;
var registrys = [argv.registry];
var registrywebs = {};
registrywebs[argv.registry] = argv.registryweb;

var nodeps = argv.deps ? false: true;
var publish = argv.syncPublish ? true : false;

var names = args.slice(1);
var packageName;
var dependencies = [];
var isPrivate = false;

var packagePath = path.join(process.cwd(), 'package.json');
if (!names.length && fs.existsSync(packagePath)) {
  try {
    console.log('Parse `package.json` file now...');
    var pkg = require(packagePath);
    packageName = pkg.name;
    var dependenciesMap = {};
    for (var key in (pkg.dependencies || {})) {
      dependenciesMap[key] = pkg.dependencies[key];
    }
    for (var key in (pkg.devDependencies || {})) {
      dependenciesMap[key] = pkg.devDependencies[key];
    }
    dependencies = Object.keys(dependenciesMap);
    isPrivate = !!pkg.private;
  } catch (err) {
    console.log('Parse `package.json` file error: %s', err.message);
    process.exit(1);
  }
}

if (names && names.length) {
  syncByNames(names);
} else if (packageName) {
  syncByPackage(packageName);
} else {
  console.log('Usage: $ cnpm sync [moduleName1 moduleName2 ...]\n\n\
Options:\n\
  --publish        sync as publish\n\
  --no-deps        do not sync dependencies and devDependencies\n');
  process.exit(1);
}

// var syncInfo = {};
// var NPM_OPTIONS = {
//   registry: registry,
//   configFile: argv.userconfig
// };

function showlog(registry, syncInfo, done) {
  request({
    method: 'GET',
    path: syncInfo.logurl + '?offset=' + syncInfo.lastLines
  }, {
    registry: registry,
    configFile: argv.userconfig
  }, function (err, info) {
    if (err) {
      return done(err);
    }
    if (!info || !info.log) {
      return setTimeout(showlog.bind(null, registry, syncInfo, done), 2000);
    }
    var log = info.log.trim();
    console.log(log);
    syncInfo.lastLines += log.split('\n').length;
    if (log.indexOf('[done] Sync ' + syncInfo.name) >= 0) {
      done();
    } else {
      setTimeout(showlog.bind(null, registry, syncInfo, done), 2000);
    }
  });
}

function sync(registry, name, callback) {
  var url = name + '/sync?';
  url += querystring.stringify({
    publish: publish,
    nodeps: nodeps,
  });
  console.log('sync %s, PUT %s/%s', name, registry, url);
  request({
    method: 'PUT',
    path: url,
    data: {}
  }, {
    registry: registry,
    configFile: argv.userconfig
  }, function (err, result, data, res) {
    if (err) {
      return callback(err);
    }
    if (res.statusCode === 404 || !result || !result.ok) {
      if (result.reason) {
        console.error('[%s] %s: %s', res.statusCode, result.error, result.reason);
      }
      return callback(null, {
        ok: false,
        statusCode: res.statusCode,
        result: result,
        data: data
      });
    }
    var syncInfo = {
      name: name,
      lastLines: 0,
      logurl: name + '/sync/log/' + result.logId
    };
    console.log('logurl: %s/sync/%s#logid=%d', registrywebs[registry], name, result.logId);
    showlog(registry, syncInfo, function (err) {
      if (err) {
        return callback(err);
      }
      callback(null, {ok: true});
    });
  });
}

function syncByNames(names) {
  var queue = new Bagpipe(1);
  var remain = names.length * registrys.length;
  if (!names) {
    console.log('Can not find any packages to sync.');
    process.exit(0);
  }
  console.log('Start sync %j.', names);
  var fail = {};
  var success = {};
  registrys.forEach(function (registry) {
    names.forEach(function (name) {
      queue.push(sync, registry, name, function (err, data) {
        remain--;
        if (err) {
          console.error(err.message);
          fail[name] = true;
        } else if (!data.ok) {
          fail[name] = true;
        } else {
          success[name] = true;
        }
        if (!remain) {
          for (var n in success) {
            if (fail[n]) {
              delete success[n];
            }
          }
          console.log('Sync all packages done, successed: %j, failed: %j',
            Object.keys(success), Object.keys(fail));
          process.exit(0);
        }
      });
    });
  });
}

function syncByPackage(packageName) {
  if (isPrivate) {
    return syncByNames(dependencies);
  }

  if (argv.yes) {
    dependencies.unshift(packageName);
    return syncByNames(dependencies);
  }

  syncByNames([packageName]);
}
